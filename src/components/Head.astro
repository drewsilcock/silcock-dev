---
import "../styles/global.css";
import { ViewTransitions } from "astro:transitions";

import "@fontsource/geist-sans";
import "@fontsource/geist-mono";

interface Props {
  title: string;
  description: string;
  imageUrl?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, imageUrl } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<link
  rel="icon"
  sizes="any"
  href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üë®üèª‚Äçüíª</text></svg>"
/>

<link rel="sitemap" type="application/xml" title="Sitemap" href="/sitemap-index.xml" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
{imageUrl && <meta property="og:image" content={new URL(imageUrl, Astro.url)} />}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
{imageUrl && <meta property="twitter:image" content={new URL(imageUrl, Astro.url)} />}

<!-- PageFind -->
<link href="/pagefind/pagefind-ui.css" rel="stylesheet" />
<script is:inline src="/pagefind/pagefind-ui.js"></script>

<!-- Get the latest one from: https://katex.org/docs/browser -->
<link
  rel="preload"
  as="style"
  onload="this.onload=null;this.rel='stylesheet'"
  href="https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.css"
  integrity="sha384-nB0miv6/jRmo5UMMR1wu3Gz6NLsoTkbqJghGIsx//Rlm+ZU03BU6SQNC66uf4l5+"
  crossorigin="anonymous"
/>

<link rel="style" href="https://www.nerdfonts.com/assets/css/webfont.css"></link>

<ViewTransitions />

<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();
    updateThemeButtons();
    //addCopyCodeButtons();
    setGiscusTheme();
    decodeEmails();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const lightThemeButton = document.getElementById("light-theme-button");
    lightThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "light");
      toggleTheme(false);
      updateThemeButtons();
    });

    const darkThemeButton = document.getElementById("dark-theme-button");
    darkThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "dark");
      toggleTheme(true);
      updateThemeButtons();
    });

    const systemThemeButton = document.getElementById("system-theme-button");
    systemThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "system");
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
      updateThemeButtons();
    });

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      });

    document.addEventListener("scroll", onScroll);
  }

  function updateThemeButtons() {
    const theme = localStorage.getItem("theme");
    const lightThemeButton = document.getElementById("light-theme-button");
    const darkThemeButton = document.getElementById("dark-theme-button");
    const systemThemeButton = document.getElementById("system-theme-button");

    function removeActiveButtonTheme(button) {
      button?.classList.remove("bg-black/5");
      button?.classList.remove("dark:bg-white/5");
    }

    function addActiveButtonTheme(button) {
      button?.classList.add("bg-black/5");
      button?.classList.add("dark:bg-white/5");
    }

    removeActiveButtonTheme(lightThemeButton);
    removeActiveButtonTheme(darkThemeButton);
    removeActiveButtonTheme(systemThemeButton);

    if (theme === "light") {
      addActiveButtonTheme(lightThemeButton);
    } else if (theme === "dark") {
      addActiveButtonTheme(darkThemeButton);
    } else {
      addActiveButtonTheme(systemThemeButton);
    }
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 100);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      ),
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);

    setGiscusTheme();
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  function addCopyCodeButtons() {
    let copyButtonLabel = "üìã";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    async function copyCode(codeBlock, copyButton) {
      const codeText = codeBlock.innerText;
      const buttonText = copyButton.innerText;
      const textToCopy = codeText.replace(buttonText, "");

      await navigator.clipboard.writeText(textToCopy);
      copyButton.innerText = "‚úÖ";

      setTimeout(() => {
        copyButton.innerText = copyButtonLabel;
      }, 2000);
    }

    for (let codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.innerText = copyButtonLabel;
      copyButton.classList = "copy-code";

      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton?.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }
  }

  function setGiscusTheme() {
    const giscus = document.querySelector(".giscus-frame");

    const isDark = document.documentElement.classList.contains("dark");

    if (giscus) {
      const url = new URL(giscus.src);
      url.searchParams.set("theme", isDark ? "dark" : "light");
      giscus.src = url.toString();
    }
  }

  // Inspired by https://spencermortensen.com/articles/email-obfuscation/#link-xor

  // 0 <= baseXorDecodeKey <= 255
  const baseXorDecodeKey = 103;

  /**
   * Convert numeric character code to hexadecimal string.
   * @param {number} charCode Numeric representation of a character.
   */
  function charCodeToHex(charCode) {
    let hex = charCode.toString(16);

    if (charCode < 16) {
      hex = "0" + hex;
    }

    return hex;
  }

  /**
   * Convert hexadecimal string to numeric character code.
   * @param {string} hex
   */
  function hexToCharCode(hex) {
    return parseInt(hex, 16);
  }

  /**
   * Decode text encoded with a simple XOR-based cipher.
   * @param {string} encodedText Xor-encoded text to decode.
   */
  function xorDecode(encodedText) {
    let decoded = "";

    for (let i = 0; i < encodedText.length; i += 2) {
      const decodeKey = (baseXorDecodeKey + i / 2) % 255;
      const hexInput = encodedText.substring(i, i + 2);
      const charCodeInput = hexToCharCode(hexInput);
      const charCodeOutput = charCodeInput ^ decodeKey;
      decoded += String.fromCharCode(charCodeOutput);
    }

    return decoded;
  }

  /**
   * This function encodes an email address using a simple XOR cipher. It's not needed
   * for the site's runtime, but it's useful to generate the encoded emails to put into
   * the site.
   * @param {string} textToEncode Email address to xor encode.
   */
  window.xorEncode = function (textToEncode) {
    let encoded = "";

    for (let i = 0; i < textToEncode.length; i++) {
      const decodeKey = (baseXorDecodeKey + i) % 255;
      const charCode = textToEncode.charCodeAt(i);
      const encodedCharCode = charCode ^ decodeKey;
      encoded += charCodeToHex(encodedCharCode);
    }

    return encoded;
  };

  const decodeEmails = () => {
    const emailElements = document.querySelectorAll(".email.protect-me");
    console.log("Email elements:", emailElements);

    for (const emailElement of emailElements) {
      const encodedEmail = emailElement.getAttribute("href");

      if (encodedEmail === null) {
        continue;
      }

      const decodedEmail = xorDecode(encodedEmail);
      emailElement.setAttribute("href", `mailto:${decodedEmail}`);
      emailElement.textContent = decodedEmail;
    }
  };

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>
