---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime, shouldRenderPage } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import Link from "@components/Link.astro";
import TableOfContents from "@components/TableOfContents.astro";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter(shouldRenderPage)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}

type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content, headings } = await project.render();
const links = [
  project.data.demoURL && {
    href: project.data.demoURL,
    text: "demo",
  },
  project.data.repoURL && {
    href: project.data.repoURL,
    text: "repo",
  },
  project.data.packageURL && {
    href: project.data.packageURL,
    text: "package",
  },
].filter(Boolean) as { href: string; text: string }[];

const tags = project.data.tags ?? [];
---

<Layout
  title={project.data.title}
  description={project.data.description}
  route={`${project.collection}/${project.slug}`}
>
  <Container>
    <div class="animate">
      <BackToPrevious href="/projects">Back to projects</BackToPrevious>
    </div>
    <div class="animate my-10 space-y-1">
      <div class="flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body)}
        </div>
      </div>
      <h1 class="text-3xl font-semibold text-black dark:text-white">
        {project.data.title}
      </h1>

      <nav class="flex gap-2">
        {
          tags.map((tag) => (
            <Link
              href={`/projects/tags/${tag}`}
              className="font-semibold text-gray-500 dark:text-gray-400"
            >
              #{tag}
            </Link>
          ))
        }
        {tags.length > 0 && links.length > 0 && " / "}
        {
          links.length > 0 &&
            links
              .map(({ href, text }) => (
                <Link href={href} external>
                  {text}
                </Link>
              ))
              .reduce((prev, curr) => [prev, " / ", curr])
        }
      </nav>
    </div>
    <TableOfContents headings={headings} />
    <article class="animate">
      <Content />
    </article>
  </Container>
</Layout>
