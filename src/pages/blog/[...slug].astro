---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import {
  readingTime,
  shouldRenderPage,
  shouldListPage,
  iconForSocial,
} from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import PostNavigation from "@components/PostNavigation.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Link from "@components/Link.astro";
import Giscus from "@components/Giscus.astro";
import FontSizeSelector from "@components/FontSizeSelector.astro";

export async function getStaticPaths() {
  // Draft posts are excluded, but archived posts are included - they're just not
  // listed.
  const posts = (await getCollection("blog"))
    .filter(shouldRenderPage)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const posts = (await getCollection("blog"))
  .filter(shouldListPage)
  .sort((a, b) => a.data.date.valueOf() - b.data.date.valueOf());

function getNextPost() {
  const postIndex = posts.findIndex((post) => post.slug === Astro.params.slug);
  return posts[postIndex + 1];
}

function getPrevPost() {
  const postIndex = posts.findIndex((post) => post.slug === Astro.params.slug);
  return posts[postIndex - 1];
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;
const { Content, headings } = await post.render();
const tags = post.data.tags ?? [];
const socials = post.data.socials ?? [];
---

<Layout
  title={post.data.title}
  description={post.data.description}
  route={`${post.collection}/${post.slug}`}
>
  <Container>
    <div class="animate flex justify-between">
      <BackToPrevious href="/blog">Back to blog</BackToPrevious>
      <FontSizeSelector />
    </div>
    <div class="my-10 space-y-1">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(post.body)}
        </div>
      </div>
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {post.data.title}
      </h1>

      <nav class="animate flex gap-2 font-semibold">
        {
          tags.map((tag) => (
            <Link
              href={`/blog/tags/${tag}`}
              className="text-gray-500 dark:text-gray-400"
            >
              #{tag}
            </Link>
          ))
        }

        {
          socials.length > 0 && (
            <>
              {tags.length > 0 && <span>&bull;</span>}
              Discuss on
              {socials.toSorted().map((social) => (
                <Link
                  href={social}
                  className="fill-black/75 dark:fill-white/75 hover:fill-black hover:dark:fill-white w-[1em]"
                  external
                  hideExternalIcon
                >
                  <span
                    class="[&>svg]:inline [&>svg]:align-baseline"
                    set:html={iconForSocial(social)}
                  />
                </Link>
              ))}
            </>
          )
        }
      </nav>
    </div>

    {headings.length > 0 && <TableOfContents headings={headings} />}

    <article class="animate">
      <Content />
      <div class="mt-24">
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div>
      <div class="mt-24">
        <Giscus />
      </div>
    </article>
  </Container>
</Layout>
